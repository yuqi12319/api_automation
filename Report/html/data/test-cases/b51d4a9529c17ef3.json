{
  "uid" : "b51d4a9529c17ef3",
  "name" : "劳务工派遣接口test",
  "fullName" : "TestCase.TestWorkforce.test_workforce_dispatch_module.TestAssign#test_dispatch",
  "historyId" : "d0be5340f8976fe59a8e3ce6cb3caa02",
  "time" : {
    "start" : 1596181871597,
    "stop" : 1596181871734,
    "duration" : 137
  },
  "status" : "broken",
  "statusMessage" : "NameError: name 'expected_msg' is not defined",
  "statusTrace" : "self = <Common.operation_assert.Assertions object at 0x105f3fdf0>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase.TestWorkforce.test_workforce_dispatch_module.TestAssign object at 0x105e77040>\ndata = {'body': {'beginTime': None, 'coOrgId': 733358092246319104, 'dispatchCoOrgId': 733365230582628352, 'employeeIds': None, ...}, 'expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'url': '/dukang-workforce/api/relation/dispatch'}\n\n    @allure.title(\"劳务工派遣接口test\")\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('Workforce/WorkforceDispatch/dispatch.yaml'))\n    def test_dispatch(self, data):\n        res = WorkforceDispatch().dispatch_api(self.url_path, data)\n>       Assertions().assert_mode(res, data)\n\nTestCase/TestWorkforce/test_workforce_dispatch_module.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x105f3fdf0>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert body == expected_result\n            Common.consts.RESULT_LIST.append('True')\n            return True\n        except:\n>           self.log.error(\"Response body != expected_msg, expected_msg is %s, body is %s\" % (expected_msg, body))\nE           NameError: name 'expected_msg' is not defined\n\nCommon/operation_assert.py:86: NameError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "login",
    "time" : {
      "start" : 1596181871209,
      "stop" : 1596181871596,
      "duration" : 387
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_Class__pytest_setup_class",
    "time" : {
      "start" : 1596181871208,
      "stop" : 1596181871208,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "NameError: name 'expected_msg' is not defined",
    "statusTrace" : "self = <Common.operation_assert.Assertions object at 0x105f3fdf0>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <TestCase.TestWorkforce.test_workforce_dispatch_module.TestAssign object at 0x105e77040>\ndata = {'body': {'beginTime': None, 'coOrgId': 733358092246319104, 'dispatchCoOrgId': 733365230582628352, 'employeeIds': None, ...}, 'expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'url': '/dukang-workforce/api/relation/dispatch'}\n\n    @allure.title(\"劳务工派遣接口test\")\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('Workforce/WorkforceDispatch/dispatch.yaml'))\n    def test_dispatch(self, data):\n        res = WorkforceDispatch().dispatch_api(self.url_path, data)\n>       Assertions().assert_mode(res, data)\n\nTestCase/TestWorkforce/test_workforce_dispatch_module.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x105f3fdf0>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n            assert body == expected_result\n            Common.consts.RESULT_LIST.append('True')\n            return True\n        except:\n>           self.log.error(\"Response body != expected_msg, expected_msg is %s, body is %s\" % (expected_msg, body))\nE           NameError: name 'expected_msg' is not defined\n\nCommon/operation_assert.py:86: NameError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "bccfdf5e600eca9d",
      "name" : "log",
      "source" : "bccfdf5e600eca9d.txt",
      "type" : "text/plain",
      "size" : 2368
    } ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ {
    "name" : "_Class__pytest_setup_class::0",
    "time" : {
      "start" : 1596181873413,
      "stop" : 1596181873413,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "劳务工派遣模块"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase.TestWorkforce"
  }, {
    "name" : "suite",
    "value" : "test_workforce_dispatch_module"
  }, {
    "name" : "subSuite",
    "value" : "TestAssign"
  }, {
    "name" : "host",
    "value" : "gilesdeMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "9343-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.TestWorkforce.test_workforce_dispatch_module"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'url': '/dukang-workforce/api/relation/dispatch', 'body': {'beginTime': None, 'coOrgId': 733358092246319104, 'dispatchCoOrgId': 733365230582628352, 'employeeIds': None, 'endTime': None, 'workforceRequestId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "b51d4a9529c17ef3.json",
  "parameterValues" : [ "{'url': '/dukang-workforce/api/relation/dispatch', 'body': {'beginTime': None, 'coOrgId': 733358092246319104, 'dispatchCoOrgId': 733365230582628352, 'employeeIds': None, 'endTime': None, 'workforceRequestId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}" ]
}