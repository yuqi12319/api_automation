{
  "uid" : "8cb4c303db120c5f",
  "name" : "test_main_scene[data0]",
  "fullName" : "TestCase.TestScene.test_organization_structure_module.TestOrganizationStructure#test_main_scene",
  "historyId" : "297c918df4948d40d0dc0ff41b9da4aa",
  "time" : {
    "start" : 1601372778166,
    "stop" : 1601372778305,
    "duration" : 139
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <TestCase.TestScene.test_organization_structure_module.TestOrganizationStructure object at 0x102ca2810>\ndata = {'business_level': {'expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'params': {'coOrgId': None, 'type': No...: None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_result': '0', 'assert_type': 'errcode'}}, ...}\nsetup_class = ('test3', '760558037424406528', '760558037416017920')\n\n    @pytest.mark.smoke\n    @pytest.mark.run(order=5)\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('SceneData/OrganizationStructureScene/main_sence.yaml'))\n    def test_main_scene(self, data, setup_class):\n    \n        with allure.step(\"第一步，获取部门下所有的子部门信息\"):\n            data['organizationsChildren']['coOrgId'] = setup_class[1]\n            organization_children_res = EmployeeDomain(setup_class[0]).organizations_children(data['organizationsChildren'])\n            Assertions().assert_mode(organization_children_res, data['organizationsChildren'])\n    \n        with allure.step(\"第二步，获取公司组织架构\"):\n            data['chart']['coOrgId'] = setup_class[1]\n            chart_res = EmployeeDomain(setup_class[0]).organizations_chart(data['chart'])\n>           Assertions().assert_mode(chart_res, data['chart'])\n\nTestCase/TestScene/test_organization_structure_module.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x102cd7a10>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1601372766096,
      "stop" : 1601372766096,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1601372777957,
      "stop" : 1601372778165,
      "duration" : 208
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_class",
    "time" : {
      "start" : 1601372778165,
      "stop" : 1601372778165,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "env",
    "time" : {
      "start" : 1601372778165,
      "stop" : 1601372778165,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <TestCase.TestScene.test_organization_structure_module.TestOrganizationStructure object at 0x102ca2810>\ndata = {'business_level': {'expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'params': {'coOrgId': None, 'type': No...: None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_result': '0', 'assert_type': 'errcode'}}, ...}\nsetup_class = ('test3', '760558037424406528', '760558037416017920')\n\n    @pytest.mark.smoke\n    @pytest.mark.run(order=5)\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('SceneData/OrganizationStructureScene/main_sence.yaml'))\n    def test_main_scene(self, data, setup_class):\n    \n        with allure.step(\"第一步，获取部门下所有的子部门信息\"):\n            data['organizationsChildren']['coOrgId'] = setup_class[1]\n            organization_children_res = EmployeeDomain(setup_class[0]).organizations_children(data['organizationsChildren'])\n            Assertions().assert_mode(organization_children_res, data['organizationsChildren'])\n    \n        with allure.step(\"第二步，获取公司组织架构\"):\n            data['chart']['coOrgId'] = setup_class[1]\n            chart_res = EmployeeDomain(setup_class[0]).organizations_chart(data['chart'])\n>           Assertions().assert_mode(chart_res, data['chart'])\n\nTestCase/TestScene/test_organization_structure_module.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x102cd7a10>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError",
    "steps" : [ {
      "name" : "第一步，获取部门下所有的子部门信息",
      "time" : {
        "start" : 1601372778166,
        "stop" : 1601372778226,
        "duration" : 60
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "第二步，获取公司组织架构",
      "time" : {
        "start" : 1601372778226,
        "stop" : 1601372778303,
        "duration" : 77
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/TestCase/TestScene/test_organization_structure_module.py\", line 55, in test_main_scene\n    Assertions().assert_mode(chart_res, data['chart'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 115, in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 82, in assert_text\n    assert body == expected_result\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "cd01bb7a9288e0a2",
      "name" : "log",
      "source" : "cd01bb7a9288e0a2.txt",
      "type" : "text/plain",
      "size" : 2440
    } ],
    "parameters" : [ ],
    "stepsCount" : 2,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "run(order=5)"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase.TestScene"
  }, {
    "name" : "suite",
    "value" : "test_organization_structure_module"
  }, {
    "name" : "subSuite",
    "value" : "TestOrganizationStructure"
  }, {
    "name" : "host",
    "value" : "yuqideMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "820-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.TestScene.test_organization_structure_module"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'organizationsChildren': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'chart': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'modify_companies': {'body': {'company_name': None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'business_level': {'params': {'coOrgId': None, 'type': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'departments': {'body': {'businessType': None, 'code': None, 'name': None, 'organizationBusinessLevelId': None, 'parent_id': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "run(order=5)", "smoke" ]
  },
  "source" : "8cb4c303db120c5f.json",
  "parameterValues" : [ "{'organizationsChildren': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'chart': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'modify_companies': {'body': {'company_name': None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'business_level': {'params': {'coOrgId': None, 'type': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'departments': {'body': {'businessType': None, 'code': None, 'name': None, 'organizationBusinessLevelId': None, 'parent_id': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}}" ]
}