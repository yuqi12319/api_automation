{
  "uid" : "ee4845ba25d873ef",
  "name" : "test_main_scene[data0]",
  "fullName" : "TestCase.TestScene.test_outgoing_module.TestOutgoing#test_main_scene",
  "historyId" : "956c9790a6df01bf5b560f56280da9ee",
  "time" : {
    "start" : 1601372793336,
    "stop" : 1601372802489,
    "duration" : 9153
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "self = <TestCase.TestScene.test_outgoing_module.TestOutgoing object at 0x102b191d0>\ndata = {'canceled_outgoing_apply': {'body': {'cancelReason': '接口自动化取消外出申请'}, 'expect': {'assert_result': '0', 'assert_type': ...expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'params': {'attendancegroupId': '760558040242978816'}}, ...}\nsetup_class = ('test3', '760558037424406528', '760558037416017920')\n\n    @pytest.mark.smoke\n    @pytest.mark.run(order=6)\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('SceneData/Outgoing/main_scene.yaml'))\n    def test_main_scene(self, data, setup_class):\n        with allure.step('第一步：获取加班默认审批流,修改审批人为指定人，自动审批通过'):\n            # 获取默认外出审批流id\n            data['outgoing_approval_list']['params']['company_id'] = setup_class[1]\n            outgoing_approval_list_res = WorkflowSetApi(setup_class[0]).attendance_approval_list_api(\n                data['outgoing_approval_list'])\n            Assertions().assert_mode(outgoing_approval_list_res, data['outgoing_approval_list'])\n            for item in outgoing_approval_list_res.json()['data']:\n                if item['name'] == '默认外出审批流':\n                    default_outgoing_approval_id = item['id']\n                else:\n                    MyLog().debug('当前公司无默认外出审批流')\n    \n            # 修改外出默认审批流，自动审批通过\n            data['update_outgoing_approval']['workflow_setting_id'] = default_outgoing_approval_id\n            data['update_outgoing_approval']['body']['approverlist'][0]['employee_id'] = setup_class[2]\n            data['update_outgoing_approval']['body']['company_id'] = setup_class[1]\n            data['update_outgoing_approval']['body']['orglist'][0]['co_org_id'] = setup_class[1]\n            update_outgoing_approval_res = WorkflowSetApi(setup_class[0]).update_attendance_approval(\n                data['update_outgoing_approval'])\n            Assertions().assert_mode(update_outgoing_approval_res, data['update_outgoing_approval'])\n    \n        with allure.step('第二步：考勤组设置'):\n            # 获取考勤组列表\n            get_attendance_group_list = attendance.get_attendance_group_list(setup_class[0], setup_class[1],\n                                                                             setup_class[2])\n            Assertions().assert_in_text(get_attendance_group_list['data'], \"默认考勤组\")\n            default_attendance_group_id = get_attendance_group_list['data'][0]['attendanceGroupId']\n    \n            # 添加考勤地点\n            add_attendance_location = attendance.add_attendance_location(setup_class[0], setup_class[1])\n            add_attendance_location_id = add_attendance_location['data']['pin_coordinate_id']\n    \n            # 查询公司班次列表\n            get_company_shift = attendance.get_company_shift(setup_class[0], setup_class[1],\n                                                             default_attendance_group_id)\n    \n            # 获取加班规则列表\n            get_overtime_rule_list = attendance.get_overtime_rule_list(setup_class[0], setup_class[1])\n    \n            # 获取假期规则列表\n            get_holiday_plan_list = attendance.get_holiday_plan_list(setup_class[0])\n    \n            # 获取默认考勤组详情\n            data['get_default_attendance_group_information']['attendancegroupId'] = default_attendance_group_id\n            data['get_default_attendance_group_information']['params'][\n                'attendancegroupId'] = default_attendance_group_id\n            get_default_attendance_group_information_res = AttendanceGroupApi(\n                setup_class[0]).get_attendance_group_information(data['get_default_attendance_group_information'])\n            Assertions().assert_mode(get_default_attendance_group_information_res,\n                                     data['get_default_attendance_group_information'])\n    \n            # 修改默认考勤组信息\n            data['update_default_attendance_group']['body']['attendanceDeductionSettingDto'] = \\\n                get_default_attendance_group_information_res.json()['data']['attendanceDeductionSettingVo']\n            data['update_default_attendance_group']['body']['companyId'] = setup_class[1]\n            data['update_default_attendance_group']['body']['employeeId'] = setup_class[2]\n            data['update_default_attendance_group']['body']['employeeIds'].append(setup_class[2])\n            data['update_default_attendance_group']['body']['holidayPlanId'] = get_holiday_plan_list['data'][1]['id']\n            data['update_default_attendance_group']['body']['id'] = default_attendance_group_id\n            data['update_default_attendance_group']['body']['overtimeId'] = get_overtime_rule_list['data'][0][\n                'overtime_setting_id']\n            data['update_default_attendance_group']['body']['pinCoordinateIds'].append(add_attendance_location_id)\n            data['update_default_attendance_group']['body']['shiftPlan']['MONDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['TUESDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['WEDNESDAY'] = get_company_shift['data'][1][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['THURSDAY'] = get_company_shift['data'][1][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['FRIDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['SATURDAY'] = get_company_shift['data'][0][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['SUNDAY'] = get_company_shift['data'][0]['id']\n            update_attendance_group_res = AttendanceGroupApi(setup_class[0]).update_attendance_group(\n                data['update_default_attendance_group'])\n            Assertions().assert_mode(update_attendance_group_res, data['update_default_attendance_group'])\n            Assertions().assert_text(update_attendance_group_res.json()['data'], str(default_attendance_group_id))\n    \n        with allure.step('第三步：外出申请'):\n    \n            data['send_outgoing_apply']['body']['orgId'] = setup_class[1]\n            data['send_outgoing_apply']['body']['employeeId'] = setup_class[2]\n            data['send_outgoing_apply']['body']['beginDate'] = round(\n                int(time.mktime(datetime.date.today().timetuple())) * 1000)\n            data['send_outgoing_apply']['body']['endDate'] = round(\n                int(time.mktime(datetime.date.today().timetuple())) * 1000)\n            data['send_outgoing_apply']['body']['approverList'][0]['employee_id'] = setup_class[2]\n            send_outgoing_apply_res = OutgoingFormApi(setup_class[0]).send_outgoing_apply_api(\n                data['send_outgoing_apply'])\n            Assertions().assert_mode(send_outgoing_apply_res, data['send_outgoing_apply'])\n            send_outgoing_apply_id = send_outgoing_apply_res.json()['data']\n            time.sleep(5)\n    \n        with allure.step('第四步：查看外出'):\n            # 查看日历\n            data['get_calendar_day_record']['body']['employeeId'] = setup_class[2]\n            get_calendar_day_record_res = CalendarApi(setup_class[0]).get_calendar_day_record_api(\n                data['get_calendar_day_record'])\n            Assertions().assert_mode(get_calendar_day_record_res, data['get_calendar_day_record'])\n            for item in get_calendar_day_record_res.json()['data']['outgoing']:\n                if item['outgoingFormId'] == send_outgoing_apply_id:\n                    Assertions().assert_text(item['status'], 'AGREED')\n                    break\n    \n            # 我的审批\n            data['my_approval']['params']['company_id'] = setup_class[1]\n            my_approval_res = EmployeeApi(setup_class[0]).my_approval_api(data['my_approval'])\n>           Assertions().assert_mode(my_approval_res, data['my_approval'])\n\nTestCase/TestScene/test_outgoing_module.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x102cf2250>\nbody = '100101', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "pytestconfig",
    "time" : {
      "start" : 1601372766096,
      "stop" : 1601372766096,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "setup_class",
    "time" : {
      "start" : 1601372793335,
      "stop" : 1601372793335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "env",
    "time" : {
      "start" : 1601372793335,
      "stop" : 1601372793335,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "login",
    "time" : {
      "start" : 1601372793128,
      "stop" : 1601372793335,
      "duration" : 207
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "self = <TestCase.TestScene.test_outgoing_module.TestOutgoing object at 0x102b191d0>\ndata = {'canceled_outgoing_apply': {'body': {'cancelReason': '接口自动化取消外出申请'}, 'expect': {'assert_result': '0', 'assert_type': ...expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'params': {'attendancegroupId': '760558040242978816'}}, ...}\nsetup_class = ('test3', '760558037424406528', '760558037416017920')\n\n    @pytest.mark.smoke\n    @pytest.mark.run(order=6)\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('SceneData/Outgoing/main_scene.yaml'))\n    def test_main_scene(self, data, setup_class):\n        with allure.step('第一步：获取加班默认审批流,修改审批人为指定人，自动审批通过'):\n            # 获取默认外出审批流id\n            data['outgoing_approval_list']['params']['company_id'] = setup_class[1]\n            outgoing_approval_list_res = WorkflowSetApi(setup_class[0]).attendance_approval_list_api(\n                data['outgoing_approval_list'])\n            Assertions().assert_mode(outgoing_approval_list_res, data['outgoing_approval_list'])\n            for item in outgoing_approval_list_res.json()['data']:\n                if item['name'] == '默认外出审批流':\n                    default_outgoing_approval_id = item['id']\n                else:\n                    MyLog().debug('当前公司无默认外出审批流')\n    \n            # 修改外出默认审批流，自动审批通过\n            data['update_outgoing_approval']['workflow_setting_id'] = default_outgoing_approval_id\n            data['update_outgoing_approval']['body']['approverlist'][0]['employee_id'] = setup_class[2]\n            data['update_outgoing_approval']['body']['company_id'] = setup_class[1]\n            data['update_outgoing_approval']['body']['orglist'][0]['co_org_id'] = setup_class[1]\n            update_outgoing_approval_res = WorkflowSetApi(setup_class[0]).update_attendance_approval(\n                data['update_outgoing_approval'])\n            Assertions().assert_mode(update_outgoing_approval_res, data['update_outgoing_approval'])\n    \n        with allure.step('第二步：考勤组设置'):\n            # 获取考勤组列表\n            get_attendance_group_list = attendance.get_attendance_group_list(setup_class[0], setup_class[1],\n                                                                             setup_class[2])\n            Assertions().assert_in_text(get_attendance_group_list['data'], \"默认考勤组\")\n            default_attendance_group_id = get_attendance_group_list['data'][0]['attendanceGroupId']\n    \n            # 添加考勤地点\n            add_attendance_location = attendance.add_attendance_location(setup_class[0], setup_class[1])\n            add_attendance_location_id = add_attendance_location['data']['pin_coordinate_id']\n    \n            # 查询公司班次列表\n            get_company_shift = attendance.get_company_shift(setup_class[0], setup_class[1],\n                                                             default_attendance_group_id)\n    \n            # 获取加班规则列表\n            get_overtime_rule_list = attendance.get_overtime_rule_list(setup_class[0], setup_class[1])\n    \n            # 获取假期规则列表\n            get_holiday_plan_list = attendance.get_holiday_plan_list(setup_class[0])\n    \n            # 获取默认考勤组详情\n            data['get_default_attendance_group_information']['attendancegroupId'] = default_attendance_group_id\n            data['get_default_attendance_group_information']['params'][\n                'attendancegroupId'] = default_attendance_group_id\n            get_default_attendance_group_information_res = AttendanceGroupApi(\n                setup_class[0]).get_attendance_group_information(data['get_default_attendance_group_information'])\n            Assertions().assert_mode(get_default_attendance_group_information_res,\n                                     data['get_default_attendance_group_information'])\n    \n            # 修改默认考勤组信息\n            data['update_default_attendance_group']['body']['attendanceDeductionSettingDto'] = \\\n                get_default_attendance_group_information_res.json()['data']['attendanceDeductionSettingVo']\n            data['update_default_attendance_group']['body']['companyId'] = setup_class[1]\n            data['update_default_attendance_group']['body']['employeeId'] = setup_class[2]\n            data['update_default_attendance_group']['body']['employeeIds'].append(setup_class[2])\n            data['update_default_attendance_group']['body']['holidayPlanId'] = get_holiday_plan_list['data'][1]['id']\n            data['update_default_attendance_group']['body']['id'] = default_attendance_group_id\n            data['update_default_attendance_group']['body']['overtimeId'] = get_overtime_rule_list['data'][0][\n                'overtime_setting_id']\n            data['update_default_attendance_group']['body']['pinCoordinateIds'].append(add_attendance_location_id)\n            data['update_default_attendance_group']['body']['shiftPlan']['MONDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['TUESDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['WEDNESDAY'] = get_company_shift['data'][1][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['THURSDAY'] = get_company_shift['data'][1][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['FRIDAY'] = get_company_shift['data'][1]['id']\n            data['update_default_attendance_group']['body']['shiftPlan']['SATURDAY'] = get_company_shift['data'][0][\n                'id']\n            data['update_default_attendance_group']['body']['shiftPlan']['SUNDAY'] = get_company_shift['data'][0]['id']\n            update_attendance_group_res = AttendanceGroupApi(setup_class[0]).update_attendance_group(\n                data['update_default_attendance_group'])\n            Assertions().assert_mode(update_attendance_group_res, data['update_default_attendance_group'])\n            Assertions().assert_text(update_attendance_group_res.json()['data'], str(default_attendance_group_id))\n    \n        with allure.step('第三步：外出申请'):\n    \n            data['send_outgoing_apply']['body']['orgId'] = setup_class[1]\n            data['send_outgoing_apply']['body']['employeeId'] = setup_class[2]\n            data['send_outgoing_apply']['body']['beginDate'] = round(\n                int(time.mktime(datetime.date.today().timetuple())) * 1000)\n            data['send_outgoing_apply']['body']['endDate'] = round(\n                int(time.mktime(datetime.date.today().timetuple())) * 1000)\n            data['send_outgoing_apply']['body']['approverList'][0]['employee_id'] = setup_class[2]\n            send_outgoing_apply_res = OutgoingFormApi(setup_class[0]).send_outgoing_apply_api(\n                data['send_outgoing_apply'])\n            Assertions().assert_mode(send_outgoing_apply_res, data['send_outgoing_apply'])\n            send_outgoing_apply_id = send_outgoing_apply_res.json()['data']\n            time.sleep(5)\n    \n        with allure.step('第四步：查看外出'):\n            # 查看日历\n            data['get_calendar_day_record']['body']['employeeId'] = setup_class[2]\n            get_calendar_day_record_res = CalendarApi(setup_class[0]).get_calendar_day_record_api(\n                data['get_calendar_day_record'])\n            Assertions().assert_mode(get_calendar_day_record_res, data['get_calendar_day_record'])\n            for item in get_calendar_day_record_res.json()['data']['outgoing']:\n                if item['outgoingFormId'] == send_outgoing_apply_id:\n                    Assertions().assert_text(item['status'], 'AGREED')\n                    break\n    \n            # 我的审批\n            data['my_approval']['params']['company_id'] = setup_class[1]\n            my_approval_res = EmployeeApi(setup_class[0]).my_approval_api(data['my_approval'])\n>           Assertions().assert_mode(my_approval_res, data['my_approval'])\n\nTestCase/TestScene/test_outgoing_module.py:157: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x102cf2250>\nbody = '100101', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError",
    "steps" : [ {
      "name" : "第一步：获取加班默认审批流,修改审批人为指定人，自动审批通过",
      "time" : {
        "start" : 1601372793336,
        "stop" : 1601372793618,
        "duration" : 282
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "第二步：考勤组设置",
      "time" : {
        "start" : 1601372793618,
        "stop" : 1601372796101,
        "duration" : 2483
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "第三步：外出申请",
      "time" : {
        "start" : 1601372796102,
        "stop" : 1601372801955,
        "duration" : 5853
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "第四步：查看外出",
      "time" : {
        "start" : 1601372801956,
        "stop" : 1601372802489,
        "duration" : 533
      },
      "status" : "failed",
      "statusMessage" : "AssertionError\n",
      "statusTrace" : "  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/TestCase/TestScene/test_outgoing_module.py\", line 157, in test_main_scene\n    Assertions().assert_mode(my_approval_res, data['my_approval'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 115, in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 82, in assert_text\n    assert body == expected_result\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ {
      "uid" : "8dffae6ee3416ab8",
      "name" : "log",
      "source" : "8dffae6ee3416ab8.txt",
      "type" : "text/plain",
      "size" : 29303
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "run(order=6)"
  }, {
    "name" : "tag",
    "value" : "smoke"
  }, {
    "name" : "parentSuite",
    "value" : "TestCase.TestScene"
  }, {
    "name" : "suite",
    "value" : "test_outgoing_module"
  }, {
    "name" : "subSuite",
    "value" : "TestOutgoing"
  }, {
    "name" : "host",
    "value" : "yuqideMacBook-Pro.local"
  }, {
    "name" : "thread",
    "value" : "820-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCase.TestScene.test_outgoing_module"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'outgoing_approval_list': {'params': {'company_id': None, 'type': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'update_outgoing_approval': {'workflow_setting_id': None, 'body': {'approverlist': [{'employee_id': None, 'sort_order': 1, 'type': 'FIXED'}], 'cclist': [], 'company_id': None, 'name': '默认外出审批流', 'orglist': [{'co_org_id': None}], 'type': 'OUTGOING'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_default_attendance_group_information': {'attendancegroupId': None, 'params': {'attendancegroupId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'update_default_attendance_group': {'body': {'attendanceDeductionSettingDto': None, 'attendanceGroupLeader': None, 'clockInMachineGroupCodes': '', 'clockSwitch': True, 'companyId': None, 'employeeId': None, 'employeeIds': [], 'holidayPlanId': None, 'id': None, 'name': '默认考勤组', 'overtimeId': None, 'pinCoordinateIds': [], 'pinWifiIds': [], 'schedulingOfficers': [], 'schedulingShiftIdList': [], 'shiftPlan': {'FRIDAY': None, 'MONDAY': None, 'SATURDAY': None, 'SUNDAY': None, 'THURSDAY': None, 'TUESDAY': None, 'WEDNESDAY': None}, 'type': 'FIXED'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'send_outgoing_apply': {'body': {'orgId': None, 'reason': None, 'employeeId': None, 'beginDate': None, 'endDate': None, 'beginDateHalfDay': 'FIRSTHALF', 'endDateHalfDay': 'SECONDHALF', 'timeZone': 'Asia/Shanghai', 'approverList': [{'employee_id': None, 'sort_order': 1}], 'ccList': [], 'duration': 1, 'attachment': '[]'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_calendar_day_record': {'body': {'timeZone': 'Asia/Shanghai', 'employeeId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'my_approval': {'params': {'company_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'my_application': {'params': {'employee_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_notifications_list': {'params': {'company_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'canceled_outgoing_apply': {'outgoingFormId': None, 'body': {'cancelReason': '接口自动化取消外出申请'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'delete_pincoordinate': {'pin_coordinate_id': None, 'params': {'attendance_group_id': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}}"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "smoke", "run(order=6)" ]
  },
  "source" : "ee4845ba25d873ef.json",
  "parameterValues" : [ "{'outgoing_approval_list': {'params': {'company_id': None, 'type': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'update_outgoing_approval': {'workflow_setting_id': None, 'body': {'approverlist': [{'employee_id': None, 'sort_order': 1, 'type': 'FIXED'}], 'cclist': [], 'company_id': None, 'name': '默认外出审批流', 'orglist': [{'co_org_id': None}], 'type': 'OUTGOING'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_default_attendance_group_information': {'attendancegroupId': None, 'params': {'attendancegroupId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'update_default_attendance_group': {'body': {'attendanceDeductionSettingDto': None, 'attendanceGroupLeader': None, 'clockInMachineGroupCodes': '', 'clockSwitch': True, 'companyId': None, 'employeeId': None, 'employeeIds': [], 'holidayPlanId': None, 'id': None, 'name': '默认考勤组', 'overtimeId': None, 'pinCoordinateIds': [], 'pinWifiIds': [], 'schedulingOfficers': [], 'schedulingShiftIdList': [], 'shiftPlan': {'FRIDAY': None, 'MONDAY': None, 'SATURDAY': None, 'SUNDAY': None, 'THURSDAY': None, 'TUESDAY': None, 'WEDNESDAY': None}, 'type': 'FIXED'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'send_outgoing_apply': {'body': {'orgId': None, 'reason': None, 'employeeId': None, 'beginDate': None, 'endDate': None, 'beginDateHalfDay': 'FIRSTHALF', 'endDateHalfDay': 'SECONDHALF', 'timeZone': 'Asia/Shanghai', 'approverList': [{'employee_id': None, 'sort_order': 1}], 'ccList': [], 'duration': 1, 'attachment': '[]'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_calendar_day_record': {'body': {'timeZone': 'Asia/Shanghai', 'employeeId': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'my_approval': {'params': {'company_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'my_application': {'params': {'employee_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'get_notifications_list': {'params': {'company_id': None, 'limit': 20, 'offset': 0}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'canceled_outgoing_apply': {'outgoingFormId': None, 'body': {'cancelReason': '接口自动化取消外出申请'}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'delete_pincoordinate': {'pin_coordinate_id': None, 'params': {'attendance_group_id': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}}" ]
}