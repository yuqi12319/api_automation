{"name": "test_main_scene[data0]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <TestCase.TestScene.test_organization_structure_module.TestOrganizationStructure object at 0x102ca2810>\ndata = {'business_level': {'expect': {'assert_result': '0', 'assert_type': 'errcode'}, 'params': {'coOrgId': None, 'type': No...: None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_result': '0', 'assert_type': 'errcode'}}, ...}\nsetup_class = ('test3', '760558037424406528', '760558037416017920')\n\n    @pytest.mark.smoke\n    @pytest.mark.run(order=5)\n    @pytest.mark.parametrize('data', YamlHandle().read_yaml('SceneData/OrganizationStructureScene/main_sence.yaml'))\n    def test_main_scene(self, data, setup_class):\n    \n        with allure.step(\"第一步，获取部门下所有的子部门信息\"):\n            data['organizationsChildren']['coOrgId'] = setup_class[1]\n            organization_children_res = EmployeeDomain(setup_class[0]).organizations_children(data['organizationsChildren'])\n            Assertions().assert_mode(organization_children_res, data['organizationsChildren'])\n    \n        with allure.step(\"第二步，获取公司组织架构\"):\n            data['chart']['coOrgId'] = setup_class[1]\n            chart_res = EmployeeDomain(setup_class[0]).organizations_chart(data['chart'])\n>           Assertions().assert_mode(chart_res, data['chart'])\n\nTestCase/TestScene/test_organization_structure_module.py:55: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nCommon/operation_assert.py:115: in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Common.operation_assert.Assertions object at 0x102cd7a10>\nbody = '100001', expected_result = '0'\n\n    def assert_text(self, body, expected_result):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :rtype:\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_result\nE           AssertionError\n\nCommon/operation_assert.py:82: AssertionError"}, "steps": [{"name": "第一步，获取部门下所有的子部门信息", "status": "passed", "start": 1601372778166, "stop": 1601372778226}, {"name": "第二步，获取公司组织架构", "status": "failed", "statusDetails": {"message": "AssertionError\n", "trace": "  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/TestCase/TestScene/test_organization_structure_module.py\", line 55, in test_main_scene\n    Assertions().assert_mode(chart_res, data['chart'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 115, in assert_mode\n    Assertions().assert_text(res.json()['errcode'], data['expect']['assert_result'])\n  File \"/Users/qi.yu/PycharmProjects/riesling-apitest/Common/operation_assert.py\", line 82, in assert_text\n    assert body == expected_result\n"}, "start": 1601372778226, "stop": 1601372778303}], "attachments": [{"name": "log", "source": "1d8bf8b4-c214-41e6-904a-7c3a3d576179-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "data", "value": "{'organizationsChildren': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'chart': {'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'modify_companies': {'body': {'company_name': None, 'header_employee_id': None}, 'coOrgId': None, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'business_level': {'params': {'coOrgId': None, 'type': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}, 'departments': {'body': {'businessType': None, 'code': None, 'name': None, 'organizationBusinessLevelId': None, 'parent_id': None}, 'expect': {'assert_type': 'errcode', 'assert_result': '0'}}}"}], "start": 1601372778166, "stop": 1601372778305, "uuid": "4df94631-965e-4ca6-af6b-08504f845f10", "historyId": "297c918df4948d40d0dc0ff41b9da4aa", "testCaseId": "f20a2faeadf68ea3481c2ec61695c49f", "fullName": "TestCase.TestScene.test_organization_structure_module.TestOrganizationStructure#test_main_scene", "labels": [{"name": "tag", "value": "run(order=5)"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "TestCase.TestScene"}, {"name": "suite", "value": "test_organization_structure_module"}, {"name": "subSuite", "value": "TestOrganizationStructure"}, {"name": "host", "value": "yuqideMacBook-Pro.local"}, {"name": "thread", "value": "820-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCase.TestScene.test_organization_structure_module"}]}